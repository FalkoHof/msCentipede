{"name":"msCentipede","tagline":"A hierarchical multiscale model for inferring transcription factor binding from chromatin accessibility data.","body":"# msCentipede\r\n\r\n**msCentipede** is an algorithm for accurately inferring transcription factor binding sites using chromatin\r\naccessibility data (Dnase-seq, ATAC-seq) and is written in Python2.x and Cython. \r\nThe [hierarchical multiscale model underlying msCentipede]() identifies factor-bound genomic sites\r\nby using patterns in DNA cleavage resulting from the action of nucleases in open chromatin regions \r\n(regions typically bound by transcription factors). msCentipede, \r\na generalization of the [CENTIPEDE](http://centipede.uchicago.edu) model, accounts for \r\nheterogeneity in the DNA cleavage patterns around sites bound by transcription factors.\r\n\r\nThis code repository contains set of scripts to load the data and run the algorithm. The current document summarizes \r\nhow to download and setup this software package and provides instructions on how to run the software\r\non a test dataset of motif instances and some publicly available DNase-seq data.\r\n\r\n## Dependencies\r\n\r\nmsCentipede depends on \r\n+ [Numpy](http://www.numpy.org/)\r\n+ [Scipy](http://www.scipy.org/)\r\n+ [Cython](http://cython.org/)\r\n+ [Cvxopt](http://www.cvxopt.org/)\r\n+ [Pysam](https://github.com/pysam-developers/pysam)\r\n\r\nA number of python distributions already have the first two modules packaged in them. It is also\r\nstraightforward to install all these dependencies \r\n (1) using package managers for MACOSX and several Linux distributions,\r\n (2) from platform-specific binary packages, and\r\n (3) directly from source\r\n\r\n## Getting the source code\r\n\r\nTo obtain the source code from github, let us assume you want to clone this repo into a\r\ndirectory named `proj`:\r\n\r\n    mkdir ~/proj\r\n    cd ~/proj\r\n    git clone https://github.com/rajanil/msCentipede\r\n\r\nTo retrieve the latest code updates, you can do the following:\r\n\r\n    cd ~/proj/msCentipede\r\n    git fetch\r\n    git merge origin/master\r\n\r\nSince the algorithm is written in Cython, msCentipede will have to be compiled into a shared object in the following way, before it can be executed.\r\n\r\n    python setup.py build_ext --inplace\r\n\r\nThis step will generate a number of warning messages that can be ignored. If there are no error messages, the compilation step should produce two files `mscentipede.c` and `mscentipede.so`.\r\n\r\n## Executing the code\r\n\r\nThe script you will need to execute is `call_binding.py`. To see command-line \r\noptions that need to be passed to the script, you can do the following:\r\n\r\n    $ python call_binding.py\r\n\r\n    runs msCentipede, to infer transcription factor binding, given a set of motif\r\n    instances and chromatin accessibility data\r\n\r\n    positional arguments:\r\n      motif_file            name of a gzipped text file containing positional\r\n                            information and other attributes for motif instances\r\n                            of a transcription factor. columns of the file should\r\n                            be as follows. Chromosome Start End Strand PWM_Score\r\n                            [Attribute_1 Attribute_2 ...]. additional attributes\r\n                            are optional.\r\n      bam_files             whitespace separated list of bam files from a\r\n                            chromatin accessibility assay\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      --task {learn,infer}  specify whether to learn model parameters or infer\r\n                            factor binding (default: learn)\r\n      --protocol {ATAC_seq,DNase_seq}\r\n                            specifies the chromatin accessibility protocol\r\n                            (default:DNase_seq)\r\n      --model {msCentipede,msCentipede_flexbg,msCentipede_flexbgmean}\r\n                            models differ in how they capture background rate of\r\n                            enzyme cleavage (default:msCentipede)\r\n      --restarts RESTARTS   number of re-runs of the algorithm (default: 1)\r\n      --mintol MINTOL       convergence criterion for change in per-site marginal\r\n                            likelihood (default: 1e-6)\r\n      --model_file MODEL_FILE\r\n                            file name to store the model parameters\r\n      --posterior_file POSTERIOR_FILE\r\n                            file name to store the posterior odds ratio, and\r\n                            likelihood ratios for each model component, at each\r\n                            motif.\r\n      --log_file LOG_FILE   file name to store some statistics of the EM algorithm\r\n      --window WINDOW       size of window around the motif instance, where\r\n                            chromatin accessibility profile is used for inferring\r\n                            transcription factor binding. (default: 128)\r\n      --batch BATCH         maximum number of motif instances used for learning\r\n                            model parameters. this is also the number of motif\r\n                            instances on which inference is performed at a time.\r\n                            (default: 10000)\r\n      --bam_file_genomicdna BAM_FILE_GENOMICDNA\r\n                            bam file from a chromatin accessibility assay on\r\n                            genomic DNA\r\n      --seed SEED           set seed for random initialization of parameters\r\n\r\nWe will now describe in detail how to use this software using an example dataset of CTCF motif instances on chromosome 10 in hg19 coordinates is provided in `test/CTCF_chr10_motifs.txt.gz`. DNase-seq data for the GM12878 cell line (bam and bai files) can be downloaded from ENCODE to `test/` . In the following instructions, we assume the data files are named [Gm12878_Rep1.bam](http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeUwDnase/wgEncodeUwDnaseGm12878AlnRep1.bam) and [Gm12878_Rep2.bam](http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeUwDnase/wgEncodeUwDnaseGm12878AlnRep2.bam).\r\n\r\nThe software is designed to run in two separate steps. In the first step, optimal values for the model parameters are estimated using a subset of all motif instances. In the second step, posterior probability of factor binding is inferred for all motif instances. Since accurate estimates of model parameters can be obtained using 5000-10000 motif instances, this enables efficient inference for those transcription factors that have orders of magnitude more motif instances genomewide. If more motif instances are available in the file than the value of the flag `--batch`, then `batch` number of motif instances that have the highest PWM score are used in learning model parameters.\r\n\r\n### Key Inputs\r\n\r\nThe key inputs that need to be passed to this script are \r\n+   a path to the file containing the list of motif instances\r\n+   the bam files (sorted and indexed) containing sequencing reads from a chromatin accessibility assay (DNase-seq or ATAC-seq). \r\n\r\n    *Note: these inputs are positional arguments and the files must be specified in the correct order (as shown above).* \r\n\r\nThe gzipped file of motif instances should have the following format.\r\n\r\n    Chr   Start     Stop      Strand  PwmScore\r\n    chr10 3944439   3944456   +       15.21570492\r\n    chr10 15627426  15627443  -       20.39377594\r\n\r\nIn the above format, positions are 0-based. *Start* corresponds to the first base of the core motif for *+* strand motif instances and the last base of the core motif for *-* strand motif instances.\r\n\r\nWhen multiple library / sample replicates are available, the bam files for the replicates can be provided as separate files, separated by whitespace. Bam files containing single-end reads and paired-end reads can be mixed since msCentipede currently does not model the fragment size distribution. However, bam files from different protocols or drastically different read lengths are best not mixed since protocol or read length differences could mask biologically meaningful heterogeneity that is relevant in identifying transcription factor binding sites. If the data were generated using an ATAC-seq protocol, the location of transpositions can be automatically identified from the read mapping positions by passing the flag `--protocol=ATAC_seq`.\r\n\r\n### Learning model parameters\r\n\r\nThe model parameters can be learned by passing the following flags.\r\n\r\n    python call_binding.py --task learn test/CTCF_chr10_motifs.txt.gz test/Gm12878_Rep1.bam test/Gm12878_Rep2.bam\r\n\r\nThis will run msCentipede with all other default values and output a log file `test/CTCF_chr10_motifs_msCentipede_log.txt` and a file `test/CTCF_chr10_motifs_msCentipede_model_parameters.pkl` in which the model parameter objects are stored. This is a standard Python pickle file that can be viewed using the `cPickle` module.\r\n\r\n### Inferring factor binding\r\n\r\nThe posterior log odds of binding for a set of motif instances can be computed by passing the following flags.\r\n\r\n    python call_binding.py --task infer test/CTCF_chr10_motifs.txt.gz test/Gm12878_Rep1.bam test/Gm12878_Rep2.bam\r\n\r\nThis will run msCentipede with all other default values and output a file `test/CTCF_chr10_motifs_msCentipede_binding_posterior.txt.gz`.\r\n\r\n### Optional parameters\r\n\r\nInstead of the default file names, you can specify the file name to which the run log, model parameters and binding posterior odds will be written, using the flags `--log_file`, `--model_file` and `--posterior_file`, respectively.\r\n\r\nThe differences between the three models *msCentipede* , *msCentipede_flexbgmean* , and *msCentipede_flexbg* are specified in detail in the associated [publication](). If the model flag is specified to be *msCentipede_flexbgmean* or *msCentipede_flexbg*, then a path to a bam file containing chromatin accessibility data from genomic DNA must be passed, using the flag `--bam_file_genomicdna`.\r\n\r\n","google":"UA-57610622-2","note":"Don't delete this file! It's used internally to help with page regeneration."}